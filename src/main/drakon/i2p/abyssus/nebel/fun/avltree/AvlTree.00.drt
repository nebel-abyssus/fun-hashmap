ИС Дракон © Тышов Г.Н. A
4,,,,,01.01.2015,"Tahoma,1,10,0,0",10,,,,
0,43,5,,,,,"""Приватный, статический"""
4,44,300,135,-90,-15,90,15,2,4,,,subtreeHeight,,,"""Высота поддерева."",,""Метод, принимая ссылку на узел, возвращает высоту поддерева с корнем в этом узле. Высота несуществующего поддерева равна нулю. Метод не обходит поддерево, а лишь считывает высоту из поля корневого узла.""","Постусловия:,""* Возвращена высота поддерева."",""* Высота несуществующего поддерева равна нулю.""",0,
5,45,300,255,-60,-15,60,15,,,,,Конец,,,"""Возвращаем вычисленную высоту.""",,0,
24,46,450,135,-30,-15,90,15,,,,,аргументы,,,"Аргументы:,""* Корень поддерева.""",,0,
25,47,90,135,-30,-15,90,15,0,,,,результат,,,"Результат:,""* Высота поддерева.""",,0,
6,48,300,195,-90,-15,90,15,,1,,,Высота,,,"""Вычисляем высоту поддерева:"",""* Если корень существует, считываем высоту из поля корня."",""* В противном случае, высота поддерева равна нулю.""",,0,
0,49,6,,,,,"""Приватный, статический"""
4,50,870,135,-90,-15,90,15,2,4,,,heightCorrection,,"Предусловия:,""* Корень поддерева существует. Не проверяется явно.""","""Коррекция высоты поддерева."",,""Метод рассчитывает, корректирует и возвращает высоту поддерева в указанном корневом узле, основываясь на высотах его дочерних веток.""","Исключения:,""* Null pointer exception - Если указанный корень поддерева не существует."",,Постусловия:,""* Произведён расчёт высоты поддерева на основе высот веток."",""* Произведено замещение текущей высоты поддерева в корне, рассчитанным значением."",""* Возвращена новая высота поддерева.""",0,
5,51,870,315,-60,-15,60,15,,,,,Конец,,,"""Возвращаем новую высоту поддерева.""",,0,
24,52,1020,135,-30,-15,90,15,,,,,аргументы,,,"Аргументы:,""* Корень поддерева.""",,0,
25,53,660,135,-30,-15,90,15,0,,,,результат,,,"Результат:,""* Новая высота поддерева."",,Исключения:,""* Null pointer exception - Если указанный корень поддерева не существует.""",,0,
6,54,870,195,-90,-15,90,15,,5,,,"""Расчёт высоты""",,,"""Расчёт высоты поддерева:"",""* Выбираем максимум из:"",""	* Высоты левой ветки."",""	* Высоты правой ветки."",""* Увеличиваем полученное значение на единицу (учитываем корень поддерева).""",,0,
6,55,870,255,-90,-15,90,15,,1,,,Коррекция,,,"""Замещаем значение высоты в корне, рассчитанным значением.""",,0,
0,17,25,,,,,Публичный
4,18,1440,135,-90,-15,90,15,2,16,,,put,,,"""Помещение элемента в дерево."",,""Метод помещает элемент в дерево. Если элемент с таким же ключом уже есть в дереве, он заменяется указанным."",,""Метод возвращает либо старый элемент с тем же ключом, если на момент обращения он был в дереве, либо, если элемента с тем же ключом в дереве не было, значение null.""","Постусловия:,""* Если дерево пусто, то создан корневой узел, с указанным элементом."",""* В противном случае:"",""	* Если дерево содержало элемент с тем же ключом, то он заменён указанным."",""	* Если не содержало, добавлен новый узел."",""		* Произведена ребалансировка дерева."",""* В случаях добавления узла (то есть структурных изменений дерева) произведено:"",""	* Увеличение размера дерева."",""	* Сброс кеша пути."",""* Увеличена версия дерева. В случае замены версия тоже увеличивается, так как элемент заменён, и вывод итераторов может оказаться неверен."",""* В случае замены, возвращён заменяемый элемент."",""* В случаях добавления узла, возвращено значение null.""",0,
5,19,1440,825,-60,-15,60,15,,,,,Конец,,,"""Возвращаем заменяемый элемент.""",,0,
24,20,1590,135,-30,-15,90,15,,,,,аргументы,,,"Аргументы:,""* Помещаемый в дерево элемент.""",,0,
25,21,1230,135,-30,-15,90,15,0,,,,результат,,,"Результат:,""* Заменяемый элемент с тем же ключом, либо значение null.""",,0,
8,22,1440,255,-90,-15,90,15,6,10,,,Пусто?,,,"""Проверяем пустоту дерева. Через размер, вероятно, менее нагружает подсистему проверки указателей сборщика мусора, но не работает при максимальном размере дерева.""",,0,D
6,23,1440,765,-90,-15,90,15,,1,,,Версия,,,"""Увеличиваем версию дерева.""",,0,
36,24,1875,255,,,,,,8,,,,,,,,0,
6,25,1665,540,-90,-15,90,15,,12,,,Замена,,,"""Замещаем заменяемый элемент указанным.""",,0,
6,26,1875,300,-90,-15,90,15,,9,,,Узел,,,"""Создаём корневой узел:"",""* Содержимое - указанный элемент."",""* Предшествующий узел не существует."",""* Следующий узел не существует.""",,0,
6,27,1875,360,-90,-15,90,15,,19,,,Цепочка,,,"""Новый корневой узел является самым левым и самым правым одновременно.""",,0,
7,28,1440,315,-90,-15,90,15,,17,,,Путь,,,"""Ищем путь к указанному элементу. Поскольку поиск производится не в пустом дереве, путь будет содержать как минимум корневой узел.""",,0,
8,29,1440,435,-90,-15,90,15,13,15,,,"""Один ключ?""",,,"""Сравниваем ключи указанного элемента и элемента узла, для определения - родительский это узел, или целевой.""",,0,D
36,30,1665,720,,,,,18,,,,,,,,,0,
36,31,1665,435,,,,,,24,,,,,,,,0,
7,32,1440,555,-90,-15,90,15,,22,,,Ребалансировка,,,"""Обращаемся к методу ребалансировки дерева, по найденному пути.""",,0,
7,33,1440,495,-90,-15,90,15,,14,,,Присоединение,,,"""Используя узел как родительский, обращаемся к методу присоединения нового узла.""",,0,
6,34,1440,195,-90,-15,90,15,,4,,,Подготовка,,,"""Новые переменные:"",""* Заменяемый элемент. Изначально не существует.""",,0,
6,35,1440,375,-90,-15,90,15,,11,,,Узел,,,"""Получаем (не изымая) конечный узел пути.""",,0,
36,36,1875,720,,,,,,,,,,,,,,0,
6,37,1875,420,-90,-15,90,15,,21,,,Размер,,,"""Увеличиваем размер дерева.""",,0,
36,38,1440,720,,,,,12,5,,,,,,,,0,
6,39,1875,480,-90,-15,90,15,,18,,,Сброс,,,"""Сбрасываем кеш пути:"",""* Сбрасываем последний найденный путь."",""* Сбрасываем последний искомый ключ.""",,0,
6,40,1440,615,-90,-15,90,15,,23,,,Размер,,,"""Увеличиваем размер дерева.""",,0,
6,41,1440,675,-90,-15,90,15,,20,,,Сброс,,,"""Сбрасываем кеш пути:"",""* Сбрасываем последний найденный путь."",""* Сбрасываем последний искомый ключ.""",,0,
6,42,1665,480,-90,-15,90,15,,7,,,Результат,,,"""Запоминаем заменяемый элемент.""",,0,
0,1,15,,,,,Приватный
4,2,2295,135,-90,-15,90,15,2,12,,,linkChildNode,,"Предусловия:,""* Указанный родительский узел существует. Не проверяется явно."",""* Указанный узел - подходящий родитель для узла с новым элементом. Не проверяется.""","""Присоединение дочернего узла."",,""Метод создает и присоединяет к указанному родительскому узлу новый дочерний узел, содержащий указанный элемент. Никаких проверок не производится, поэтому вызывающий код должен удостоверится, что указанный родительский узел может выступать родителем дочернего узла с указанным содержимым (элементом)."",,""При присоединении дочернего узла, метод определяет свободную ветку родительского узла, присоединяя к ней новый дочерний узел. Поскольку никаких проверок на допустимость не производится, указанный родительский узел должен содержать свободную дочернюю ветку с подходящей для указанного элемента стороны, иначе произойдёт нарушение логической структуры дерева. Если обе дочерние ветки свободны, нужная определяется сравнением ключей элементов. Кроме прикрепления к родительскому узлу, метод встраивает созданный узел в цепочку узлов, в зависимости от занимаемой дочерней ветки. При необходимости проводится коррекция ссылок на крайние узлы цепочки."",,""По окончании работы, метод возвращает созданный дочерний узел.""","Исключения:,""* Null pointer exception - Если указанный родительский узел не существует."",,Постусловия:,""* Создан новый узел содержащий указанный элемент."",""* Если в родительском узле занята правая дочерняя ветка, то новый узел занимает левую дочернюю ветку."",""* Если в родительском узле занята левая дочерняя ветка, то новый узел занимает правую дочернюю ветку."",""* Если в родительском узле свободны обе дочерние ветки, то нужная определена сравнением ключей."",""* Новый узел встроен в цепочку, с соответствующей стороны от родительского узла."",""* Только наилевейший узел не имеет предшествующего узла."",""* Только наиправейший узел не имеет следующего узла."",""* Возвращён созданный узел.""",0,
5,3,2295,525,-60,-15,60,15,,,,,Конец,,,"""Возвращаем созданный узел.""",,0,
24,4,2445,135,-30,-15,90,15,,,,,аргументы,,,"Аргументы:,""* Родительский узел."",""* Элемент нового узла.""",,0,
25,5,2085,135,-30,-15,90,15,0,,,,результат,,,"Результат:,""* Созданный дочерний узел."",,Исключения:,""* Null pointer exception - Если указанный родительский узел не существует.""",,0,
8,6,2295,255,-90,-15,90,15,6,8,,,"""Левая нода?""",,,"""Новый узел занимает левую дочернюю ветку родительского, если:"",""* Правый дочерний узел родительского узла существует, или выполнены условия:"",""	* Левый дочерний узел не существует."",""	* Ключ указанного элемента меньше ключа элемента родительского узла."",,""Во всех остальных случаях новый узел занимает правую дочернюю ветку указанного родительского узла.""",,0,
36,7,2295,480,,,,,7,1,,,,,,,,0,
36,8,2520,255,,,,,,9,,,,,,,,0,
36,9,2520,480,,,,,,,,,,,,,,0,
6,10,2295,315,-90,-15,90,15,,10,,,Узел,,,"""Создаём новый узел:"",""* Содержимое - указанный элемент."",""* Предшествующий узел - предшествующий родительскому узлу."",""* Следующий узел - родительский узел.""",,0,
6,11,2520,300,-90,-15,90,15,,11,,,Узел,,,"""Создаём новый узел:"",""* Содержимое - указанный элемент."",""* Предшествующий узел - родительский узел."",""* Следующий узел - следующий за родительским узлом.""",,0,
6,12,2295,375,-90,-15,90,15,,13,,,Присоединение,,,"""Присоединяем к родительскому узлу:"",""* Новый узел - левый дочерний узел родительского."",""* Новый узел предшествует родительскому узлу.""",,0,
6,13,2520,360,-90,-15,90,15,,14,,,Присоединение,,,"""Присоединяем к родительскому узлу:"",""* Новый узел - правый дочерний узел родительского."",""* Новый узел следует за родительским узлом.""",,0,
6,14,2295,195,-90,-15,90,15,,4,,,Подготовка,,,"""Новые переменные:"",""* Новый узел.""",,0,
6,15,2295,435,-90,-15,90,15,,5,,,Включение,,,"""Корректируем цепочку узлов:"",""* Если узел предшествующий новому существует, то новый следует за предшествующим."",""* В противном случае, новый узел - наилевейший.""",,0,
6,16,2520,420,-90,-15,90,15,,7,,,Включение,,,"""Корректируем цепочку узлов:"",""* Если узел следующий за новым существует, то новый узел предшествует следующему."",""* В противном случае, новый узел - наиправейший.""",,0,

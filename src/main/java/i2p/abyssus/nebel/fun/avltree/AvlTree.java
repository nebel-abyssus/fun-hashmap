package i2p.abyssus.nebel.fun.avltree;

/**
 * Реализация <a href="https://ru.wikipedia.org/wiki/%D0%90%D0%92%D0%9B-%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D0%BE">АВЛ-дерева</a>.
 * <p>Дерево представлено узлами. Узлы дополнительно образуют двусвязный список. Ключи элементов в списке узлов, упорядочены от меньших к большим. Дерево может принимать в качестве элементов значения {@code null}, если указанный при создании дерева экстрактор ключей принимает значения {@code null}.</p>
 * @param <E> Тип элементов.
 * @param <K> Тип ключей элементов.
 */
public class AvlTree <E, K> {

// nested classes

	/**
	 * Узел АВЛ-дерева.
	 * <p>Простой класс для непосредственного хранения данных. Класс не содержит никаких методов, а доступ к его полям осуществляется напрямую.</p>
	 * <p>Узлы не только хранят элементы, но и составляют структуру дерева. Кроме того, узлы образуют двусвязный список, с возрастающими ключами элементов.</p>
	 * @param <E> Тип элементов.
	 */
	private static class Node <E> {

	// instance fields

		/**
		 * Хранимый элемент.
		 */
		private E item;

		/**
		 * Левый дочерний узел.
		 */
		private Node<E> leftChild;

		/**
		 * Правый дочерний узел.
		 */
		private Node<E> rightChild;

		/**
		 * Предшествующий узел списка.
		 */
		private Node<E> previousNode;

		/**
		 * Следующий узел списка.
		 */
		private Node<E> nextNode;

	// constructors

		/**
		 * Конструктор узла дерева.
		 * <p>Конструктор не выполняет никаких действий. Поля необходимо инициализировать &quot;вручную&quot; после обращения к конструктору.</p>
		 */
		private Node (
		) { // method body
			// do nothing
		} // Node()

	} // Node

	// todo
} // AvlTree
